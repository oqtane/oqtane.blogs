@using Oqtane.Blogs.Services
@using Oqtane.Blogs.Models
@using Oqtane.Blogs.Shared
@using System.Globalization
@using System.Net

@namespace Oqtane.Blogs
@inherits ModuleBase
@inject IBlogService BlogService
@inject IBlogCommentService BlogCommentService
@inject IBlogCategoryService BlogCategoryService
@inject IFileService FileService
@inject IBlogSubscriberService BlogSubscriberService
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_blog != null)
{
    <div class="text-center"><NavLink class="btn btn-secondary btn-view-all" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
    <br />
    @if (_blog.PublishedBlogContent == null && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList))
    {
        <div class="alert alert-warning">
            <p class="mb-0">@Localizer["NotPublished"]</p>
        </div>
    }
    @if (_blogEditor)
    {
        <div class="text-center">
            <ActionLink Action="Edit" Parameters="@($"id=" + _blog.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
        </div>
    }
    @((MarkupString)Utilities.FormatContent(FormatTemplate(_detail, _blog), PageState.Alias, "render"))

    @if (_comments == "True" && _blogComments != null)
    {
        <Section Name="Comments" Heading="@_commentTitle" Expanded="True">
            @foreach (var blogComment in _blogComments)
            {
                @if (_blogEditor)
                {
                    <div>
                        <NavLink class="btn btn-primary" href="@(NavigateUrl(PageState.Page.Path, Utilities.AddUrlParameters(_blog.BlogId)) + $"?comment={blogComment.BlogCommentId}")">@SharedLocalizer["Edit"]</NavLink>
                    </div>
                }
                @((MarkupString)Utilities.FormatContent(FormatComment(_commentTemplate, blogComment), PageState.Alias, "render"))
            }
            @if (_blog.AllowComments)
            {
                <br />
                <div class="container mt-2">
                    <div class="row mb-1 justify-content-center">
                        <h5 class="text-center">@Localizer["Feedback"]</h5>
                        <div class="col">
                            <div class="text-center">
                                <form method="post" class="app-form-inline" @onsubmit="SubmitComment" @formname="BlogCommentForm" data-enhance>
                                    <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                                    <div class="input-group">
                                        <input name="commentName" class="form-control" placeholder="@Localizer["Name"]" @bind="@_commentName" />
                                        <input name="commentEmail" class="form-control mx-1" placeholder="@Localizer["Email"]" @bind="@_commentEmail" />
                                    </div>
                                    <textarea name="commentComment" class="form-control mt-1 mb-2" rows="3" @bind="@_commentComment" />
                                    <div>
                                        <input type="checkbox" class="me-1" onclick="document.getElementById('commentValidation2').value = (new Date()).toISOString().slice(0,19).replace('T',' ')">
                                        <label class="form-check-label">@Localizer["Robot"]</label>
                                        <button type="submit" class="btn btn-primary ms-2">@Localizer["Submit"]</button>
                                    </div>
                                    <input type="hidden" name="commentCreatedOn" @bind="@_commentCreatedOn" />
                                    <input type="hidden" id="commentValidation1" name="commentValidation1" @bind="@_commentValidation1" />
                                    <input type="hidden" id="commentValidation2" name="commentValidation2" @bind="@_commentValidation2" />
                                    <input type="hidden" id="commentValidation3" name="commentValidation3" @bind="@_commentValidation3" />
                                </form>
                                @if (PageState.QueryString.ContainsKey("comment"))
                                {
                                    if (_blogEditor || _commentEditor)
                                    {
                                        <NavLink class="btn btn-secondary mt-2" href="@NavigateUrl(PageState.Page.Path, Utilities.AddUrlParameters(_blog.BlogId))">@SharedLocalizer["Cancel"]</NavLink>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <ModuleMessage Type="MessageType.Info" Message="This Blog Is No Longer Accepting Comments" />
            }
        </Section>
    }

    @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
    {
        <div class="container mt-4">
            <div class="row mb-1 justify-content-center">
                <h5 class="text-center">@Localizer["Notify"]</h5>
                <div class="col-sm-12 col-md-9 col-lg-6">
                    <div class="text-center">
                        <form method="post" class="app-form-inline" @onsubmit="Subscribe" @formname="BlogSubscriptionForm" data-enhance>
                            <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                            <div class="input-group mb-2">
                                <input name="subscriptionEmail" class="form-control" placeholder="@Localizer["Email"]" @bind="@_subscriptionEmail" />
                                <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                            </div>
                            <div>
                                <input type="checkbox" class="me-1" onclick="document.getElementById('subscriptionValidation2').value = (new Date()).toISOString().slice(0,19).replace('T',' ')">
                                <label class="form-check-label">@Localizer["Robot"]</label>
                                <button type="submit" class="btn btn-primary ms-2">@Localizer["Subscribe"]</button>
                            </div>
                            <input type="hidden" id="subscriptionValidation1" name="subscriptionValidation1" @bind="@_subscriptionValidation1" />
                            <input type="hidden" id="subscriptionValidation2" name="subscriptionValidation2" @bind="@_subscriptionValidation2" />
                            <input type="hidden" id="subscriptionValidation3" name="subscriptionValidation3" @bind="@_subscriptionValidation3" />
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
    <br />
    <div class="text-center mt-4"><NavLink class="btn btn-secondary btn-view-all" href="@NavigateUrl()">@Localizer["ViewAll"]</NavLink></div>
    <br />
}
else
{
    @if (_blogs != null)
    {
        @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
        {
            <div class="text-center mb-2">
                <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="AddBlog" Text="Add Blog" />
                @if (_comments == "True")
                {
                    <ActionLink Action="Comments" Security="SecurityAccessLevel.Edit" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="Comments" Text="Manage Comments" Class="btn btn-secondary ms-1" />
                }
            </div>
        }

        @if (_blogs.Any())
        {
            @((MarkupString)_summaryHeader)
            <Pager Format="Grid" Items="@_blogs" DisplayPages="1" PageSize="@_items.ToString()" ColumnClass="@_columnCssClass" RowClass="@_rowCssClass" SearchProperties="@_searchProperties" Toolbar="@_pagerPosition">
                <Row>
                    @((MarkupString)Utilities.FormatContent(FormatTemplate(_summary, context), PageState.Alias, "render"))
                    @if (UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode)
                    {
                        <div class ="text-center">
                            <ActionLink Action="Edit" Parameters="@($"id=" + context.BlogId.ToString())" ReturnUrl="@PageState.Route.PathAndQuery" ResourceKey="EditBlog" Text="Edit" />
                        </div>
                    }
                </Row>
            </Pager>
            @((MarkupString)_summaryFooter)
        }
        else
        {
            <div class="text-center">@Localizer["NoBlogs"]</div>
        }
        @if (SettingService.GetSetting(ModuleState.Settings, "Subscriptions", "False") == "True")
        {
            <div class="container mt-4">
                <div class="row mb-1 justify-content-center">
                    <h5 class="text-center">@Localizer["Notify"]</h5>
                    <div class="col-sm-12 col-md-9 col-lg-6">
                        <div class="text-center">
                            <form method="post" class="app-form-inline" @onsubmit="Subscribe" @formname="BlogSubscriptionForm" data-enhance>
                                <input type="hidden" name="@Constants.RequestVerificationToken" value="@SiteState.AntiForgeryToken" />
                                <div class="input-group mb-2">
                                    <input name="subscriptionEmail" class="form-control" placeholder="@Localizer["Email"]" @bind="@_subscriptionEmail" />
                                    <a href="@_rss" target="_new" class="btn btn-secondary">@Localizer["RSS"]</a>
                                </div>
                                <div>
                                    <input type="checkbox" class="me-1" onclick="document.getElementById('subscriptionValidation2').value = (new Date()).toISOString().slice(0,19).replace('T',' ')">
                                    <label class="form-check-label">@Localizer["Robot"]</label>
                                    <button type="submit" class="btn btn-primary ms-2">@Localizer["Subscribe"]</button>
                                </div>
                                <input type="hidden" id="subscriptionValidation1" name="subscriptionValidation1" @bind="@_subscriptionValidation1" />
                                <input type="hidden" id="subscriptionValidation2" name="subscriptionValidation2" @bind="@_subscriptionValidation2" />
                                <input type="hidden" id="subscriptionValidation3" name="subscriptionValidation3" @bind="@_subscriptionValidation3" />
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}
<br />

@code {
    public override string UrlParametersTemplate => "/{id}/{slug}";
    public override string RenderMode => RenderModes.Static;

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentName { get => ""; set => _commentName = value; }

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentEmail { get => ""; set => _commentEmail = value; }

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentComment { get => ""; set => _commentComment = value; }

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentCreatedOn { get => ""; set => _commentCreatedOn = value; }

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentValidation1 { get => ""; set => _commentValidation1 = value; }

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentValidation2 { get => ""; set => _commentValidation2 = value; }

    [SupplyParameterFromForm(FormName = "BlogCommentForm")]
    public string commentValidation3 { get => ""; set => _commentValidation3 = value; }


    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string subscriptionEmail { get => ""; set => _subscriptionEmail = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string subscriptionValidation1 { get => ""; set => _subscriptionValidation1 = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string subscriptionValidation2 { get => ""; set => _subscriptionValidation2 = value; }

    [SupplyParameterFromForm(FormName = "BlogSubscriptionForm")]
    public string subscriptionValidation3 { get => ""; set => _subscriptionValidation3 = value; }

    private int _mintime = 5; // 5 second minimum
    private int _maxtime = 3600; // 1 hour maximum

    private bool _blogEditor = false;
    private bool _commentEditor = false;

    private int _items;
    private string _summary;
    private string _detail;
    private string _commentTemplate;
    private string _comments;
    private string _searchProperties;
    private string _pagerPosition;
    private string _columnCssClass;
    private string _rowCssClass;
    private string _blogName;
    private string _metaTags;
    private string _pageTitle;
    private string _archiveTitle;
    private string _categoryTitle;
    private string _tagTitle;
    private string _archiveDescription;
    private string _categoryDescription;
    private string _tagDescription;
    private string _paginationTitle;

    private List<Blog> _blogs;
    private string _summaryHeader;
    private string _summaryFooter;

    private Blog _blog;
    private string _categoryName;

    private List<BlogComment> _blogComments;
    private string _commentTitle = "";
    private string _commentName = "";
    private string _commentEmail = "";
    private string _commentComment = "";
    private string _commentCreatedOn = "";
    private string _commentValidation1 = "";
    private string _commentValidation2 = "true";
    private string _commentValidation3 = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);

    private string _subscriptionEmail = "";
    private string _subscriptionValidation1 = "";
    private string _subscriptionValidation2 = "true";
    private string _subscriptionValidation3 = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
    private string _rss = "";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/Oqtane.Blogs/Module.css" }
    };

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (ShouldRender())
            {
                _blogEditor = UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode;

                if (string.IsNullOrEmpty(_subscriptionEmail) && PageState.QueryString.ContainsKey("guid") && PageState.QueryString.ContainsKey("action"))
                {
                    if (PageState.QueryString["action"] == "unsubscribe")
                    {
                        await BlogSubscriberService.DeleteBlogSubscriberAsync(ModuleState.ModuleId, PageState.QueryString["guid"]);
                        AddModuleMessage(Localizer["Unsubscribed"], MessageType.Success);
                    }
                    if (PageState.QueryString["action"] == "verify")
                    {
                        await BlogSubscriberService.UpdateBlogSubscriberAsync(ModuleState.ModuleId, PageState.QueryString["guid"]);
                        AddModuleMessage(Localizer["Verified"], MessageType.Success);
                    }
                }

                if (PageState.QueryString.ContainsKey("comment") && PageState.QueryString.ContainsKey("created"))
                {
                    var blogComment = await BlogCommentService.GetBlogCommentAsync(int.Parse(PageState.QueryString["comment"]), int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                    if (blogComment != null && blogComment.CreatedOn.ToString("yyyyMMddHHmmssfff") == PageState.QueryString["created"])
                    {
                        if (!blogComment.IsPublished && !_blogEditor)
                        {
                            blogComment.IsPublished = true;
                            await BlogCommentService.UpdateBlogCommentAsync(blogComment, ModuleState.ModuleId);
                            AddModuleMessage("Blog Comment Published", MessageType.Success);
                        }
                        _commentEditor = true;
                    }
                }

                if (PageState.QueryString.ContainsKey("category") && int.TryParse(PageState.QueryString["category"], out int categoryId))
                {
                    _categoryName = (await BlogCategoryService.GetBlogCategorySourcesAsync(ModuleState.ModuleId)).FirstOrDefault(i => i.BlogCategorySourceId == categoryId)?.Name ?? string.Empty;
                }

                _items = int.Parse(SettingService.GetSetting(ModuleState.Settings, "Items", "10"));
                _summary = SettingService.GetSetting(ModuleState.Settings, "Summary", BlogConstants.DefaultSummaryTemplate);
                _detail = SettingService.GetSetting(ModuleState.Settings, "Detail", BlogConstants.DefaultDetailTemplate);
                _commentTemplate = SettingService.GetSetting(ModuleState.Settings, "Comment", BlogConstants.DefaultCommentTemplate);
                _comments = SettingService.GetSetting(ModuleState.Settings, "Comments", "False");
                _searchProperties = SettingService.GetSetting(ModuleState.Settings, "SearchProperties", BlogConstants.DefaultSearchProperties);
                _pagerPosition = SettingService.GetSetting(ModuleState.Settings, "PagerPosition", BlogConstants.DefaultPagerPosition);
                _columnCssClass = SettingService.GetSetting(ModuleState.Settings, "ColumnCssClass", BlogConstants.DefaultColumnCssClass);
                _rowCssClass = SettingService.GetSetting(ModuleState.Settings, "RowCssClass", BlogConstants.DefaultRowCssClass);
                _blogName = SettingService.GetSetting(ModuleState.Settings, "BlogName", "Blog");
                _metaTags = SettingService.GetSetting(ModuleState.Settings, "MetaTags", string.Empty);
                _pageTitle = SettingService.GetSetting(ModuleState.Settings, "PageTitle", "[BlogName] | [Post:title]");
                _archiveTitle = SettingService.GetSetting(ModuleState.Settings, "ArchiveTitle", "[BlogName] | [Month] [Year]");
                _categoryTitle = SettingService.GetSetting(ModuleState.Settings, "CategoryTitle", "[BlogName] | [Category]");
                _tagTitle = SettingService.GetSetting(ModuleState.Settings, "TagTitle", "[BlogName] | [Tag]");
                _archiveDescription = SettingService.GetSetting(ModuleState.Settings, "ArchiveDescription", "Find all [BlogName] posts published on [Month] [Year]");
                _categoryDescription = SettingService.GetSetting(ModuleState.Settings, "CategoryDescription", "Find all [BlogName] posts in category [Category]");
                _tagDescription = SettingService.GetSetting(ModuleState.Settings, "TagDescription", "Find all [BlogName] posts tagged with [Tag]");
                _paginationTitle = SettingService.GetSetting(ModuleState.Settings, "PaginationTitle", " | Page [PageNumber]");

                var summaryItemTemplate = string.Empty;
                if (BlogUtilities.ParseListTemplate(_summary, out summaryItemTemplate, out _summaryHeader, out _summaryFooter))
                {
                    _summary = summaryItemTemplate;
                }

                _blog = null;
                if (!string.IsNullOrEmpty(PageState.UrlParameters))
                {
                    if (UrlParameters.ContainsKey("id"))
                    {
                        _blog = await BlogService.GetBlogAsync(int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                    }
                    else if (UrlParameters.ContainsKey("slug"))
                    {
                        _blog = await BlogService.GetBlogBySlugAsync(UrlParameters["slug"], ModuleState.ModuleId);
                    }

                    if (_blog != null && (_blog.PublishedBlogContent != null || PageState.EditMode))
                    {
                        var blogContent = PageState.EditMode ? _blog.LatestBlogContent : _blog.PublishedBlogContent;
                        if (blogContent != null)
                        {
                            SetPageTitle(FormatTemplate(_pageTitle, _blog));

                            if (!string.IsNullOrEmpty(blogContent.Summary))
                            {
                                AddHeadContent($"<meta name=\"description\" content=\"{WebUtility.HtmlEncode(blogContent.Summary)}\" />");
                            }
                            if (!string.IsNullOrEmpty(_blog.Tags))
                            {
                                AddHeadContent($"<meta name=\"keywords\" content=\"{_blog.Tags}\" />");
                            }

                            if (!string.IsNullOrEmpty(_metaTags))
                            {
                                AddHeadContent(FormatTemplate(_metaTags, _blog));
                            }

                            AddHeadContent($"<link rel=\"canonical\" href=\"{PageState.Route.RootUrl}{BlogUtilities.FormatUrl(PageState.Alias.Path, PageState.Page.Path, _blog)}\">");
                        }

                        _blogComments = await BlogCommentService.GetBlogCommentsAsync(_blog.BlogId, ModuleState.ModuleId, true);
                        var comments = _blogComments.Count();
                        _commentTitle = comments.ToString() + " " + ((comments == 1) ? Localizer["Comment"] : Localizer["Comments"]);

                        if (_commentName == "" && PageState.QueryString.ContainsKey("comment"))
                        {
                            var blogComment = await BlogCommentService.GetBlogCommentAsync(int.Parse(PageState.QueryString["comment"]), int.Parse(UrlParameters["id"]), ModuleState.ModuleId);
                            if (blogComment != null)
                            {
                                _commentName = WebUtility.HtmlDecode(blogComment.Name);
                                _commentEmail = WebUtility.HtmlDecode(blogComment.Email);
                                _commentComment = WebUtility.HtmlDecode(blogComment.Comment);
                                _commentCreatedOn = blogComment.CreatedOn.ToString();
                            }
                        }
                        else
                        {
                            if (PageState.User != null)
                            {
                                _commentName = PageState.User.DisplayName;
                                _commentEmail = PageState.User.Email;
                            }
                        }

                        //update views
                        await BlogService.UpdateBlogViewsAsync(_blog.BlogId, ModuleState.ModuleId);
                    }
                    else
                    {
                        AddModuleMessage(Localizer["NotFound"], MessageType.Error);
                        _blog = null;
                    }
                }
                if (_blog == null)
                {
                    await GetBlogs();
                    SetListMetaTags();
                }

                AddHeadContent($"<meta name=\"robots\" content=\"INDEX, FOLLOW\" />");

                _rss = $"/api/blog/rss/{ModuleState.ModuleId}";
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Blogs {Error}", ex.Message);
        }
    }

    private async Task GetBlogs()
    {
        _blog = null;
        var searchQuery = new BlogSearch
        {
            Keywords = string.Empty,
            IncludeDraft = UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, ModuleState.PermissionList) && PageState.EditMode,
            Categories = PageState.QueryString.ContainsKey("category") ? WebUtility.UrlDecode(PageState.QueryString["category"]) : string.Empty,
            Tags = PageState.QueryString.ContainsKey("tag") ? WebUtility.UrlDecode(PageState.QueryString["tag"]) : string.Empty,
            StartDate = null,
            EndDate = null,
            PageIndex = 0,
            PageSize = 0,
            SortBy = string.Empty,
            SortByDescending = true
        };

        if(PageState.QueryString.ContainsKey("year") && int.TryParse(PageState.QueryString["year"], out int year))
        {
            if (!PageState.QueryString.ContainsKey("month") || !int.TryParse(PageState.QueryString["month"], out int month))
            {
                month = 0;
            }

            searchQuery.StartDate = new DateTime(year, month == 0 ? 1 : month, 1);
            searchQuery.EndDate = month == 0 ? searchQuery.StartDate.Value.AddYears(1) : searchQuery.StartDate.Value.AddMonths(1);
        }

        _blogs = await BlogService.GetBlogsAsync(ModuleState.ModuleId, searchQuery);
    }

    private string FormatTemplate(string template, Blog blog)
    {
        var blogContent = blog != null ? (PageState.EditMode ? blog.LatestBlogContent : blog.PublishedBlogContent) : null;
        var blogPageUrl = Utilities.NavigateUrl(PageState.Alias.Path, PageState.Page.Path, string.Empty);
        DateTime? publishDate = blogContent != null ? blogContent.PublishDate : null;
        var thumbnailPath = blog?.Thumbnail > 0 ? Utilities.FileUrl(PageState.Alias, blog.Thumbnail) : string.Empty;

        template = template.Replace("[ID]", blog?.BlogId.ToString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TITLE]", blog?.Title, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[SLUG]", blog?.Slug, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[VIEWS]", blog?.Views.ToString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[THUMBNAILPATH]", thumbnailPath, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[ALTERNATETEXT]", blog?.AlternateText, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[THUMBNAIL]", BlogUtilities.FormatThumbnail(blog, thumbnailPath), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CATEGORIES]", BlogUtilities.FormatCategories(blog, blogPageUrl), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TAGS]", BlogUtilities.FormatTags(blog, blogPageUrl), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[SUMMARY]", blogContent?.Summary, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CONTENT]", Utilities.FormatContent(blogContent?.Content, PageState.Alias, "render"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CREATEDBY]", blog?.CreatedBy, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CREATEDON]", blog?.CreatedOn.ToShortDateString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[URL]", BlogUtilities.FormatUrl(PageState.Alias.Path, PageState.Page.Path, blog), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHEDON]", BlogUtilities.FormatDate(publishDate, "MMMM dd, yyyy"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHEDBY]", blogContent?.CreatedBy, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[MODIFIEDON]", BlogUtilities.FormatDate(blogContent?.ModifiedOn, "MMMM dd, yyyy"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHDAY]", BlogUtilities.FormatDate(publishDate, "dd"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PUBLISHMONTH]", BlogUtilities.FormatDate(publishDate, "MMMM"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[BLOGNAME]", _blogName, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[CATEGORY]", _categoryName, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[MONTH]", GetQueryString("month"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[YEAR]", GetQueryString("year"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[POST:TITLE]", blog?.Title, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[POST:SUMMARY]", blogContent?.Summary, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[PAGENUMBER]", GetQueryString("page"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TAG]", GetQueryString("tag"), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TAGSMETA]", GenerateTagsMeta(blog), StringComparison.OrdinalIgnoreCase);

        return template;
    }

    private string FormatComment(string template, BlogComment blogComment)
    {
        template = template.Replace("[COMMENT]", blogComment.Comment, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[NAME]", blogComment.Name, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[EMAIL]", blogComment.Email, StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[DATE]", blogComment.CreatedOn.ToShortDateString(), StringComparison.OrdinalIgnoreCase);
        template = template.Replace("[TIME]", blogComment.CreatedOn.ToShortTimeString(), StringComparison.OrdinalIgnoreCase);
        return template;
    }

    private void SetListMetaTags()
    {
        var title = string.Empty;
        var description = string.Empty;
        if (PageState.QueryString.ContainsKey("category"))
        {
            title = FormatTemplate(_categoryTitle, null);
            description = FormatTemplate(_categoryDescription, null);
        }
        else if (PageState.QueryString.ContainsKey("tag"))
        {
            title = FormatTemplate(_tagTitle, null);
            description = FormatTemplate(_tagDescription, null);
        }
        else if (PageState.QueryString.ContainsKey("year") || PageState.QueryString.ContainsKey("month"))
        {
            title = FormatTemplate(_archiveTitle, null);
            description = FormatTemplate(_archiveDescription, null);
        }

        if(!string.IsNullOrEmpty(title))
        {
            SetPageTitle(title);
        }

        if (!string.IsNullOrEmpty(description))
        {
            AddHeadContent($"<meta name=\"description\" content=\"{description}\" />");
        }
    }

    private string GetQueryString(string key)
    {
        if(PageState.QueryString.ContainsKey(key))
        {
            var value = WebUtility.UrlDecode(PageState.QueryString[key]);
            if (value == WebUtility.HtmlEncode(value) && value == WebUtility.HtmlDecode(value))
            {
                return value;
            }
        }

        return string.Empty;
    }

    private string GenerateTagsMeta(Blog blog)
    {
        if(blog?.BlogTags != null)
        {
            return string.Join("", blog.BlogTags.Select(i =>
            {
                return $"<meta property=\"og:tag\" content=\"{i.BlogTagSource.Tag}\" />";
            }));
        }

        return string.Empty;
    }

    private async Task Subscribe()
    {
        if (!string.IsNullOrEmpty(_subscriptionEmail) && Utilities.IsValidEmail(_subscriptionEmail))
        {
            // bot validation
            if (_subscriptionValidation1.Length == 0 && _subscriptionValidation2.Length == 19 && DateTime.TryParseExact(_subscriptionValidation2, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp1) &&
              _subscriptionValidation3.Length == 19 && DateTime.TryParseExact(_subscriptionValidation3, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp2) &&
              (timestamp1 - timestamp2).TotalSeconds >= _mintime && (timestamp1 - timestamp2).TotalSeconds <= _maxtime &&
              (DateTime.UtcNow - timestamp2).TotalSeconds >= _mintime && (DateTime.UtcNow - timestamp2).TotalSeconds <= _maxtime)
            {
                var subscriber = new BlogSubscriber();
                subscriber.ModuleId = ModuleState.ModuleId;
                subscriber.Email = _subscriptionEmail;
                await BlogSubscriberService.AddBlogSubscriberAsync(subscriber);
                AddModuleMessage(Localizer["Activated"], MessageType.Success, "bottom");
                _subscriptionEmail = "";
            }
            else
            {
                // clear fields for bot
                _subscriptionEmail = "";
                _subscriptionValidation1 = "";
                _subscriptionValidation2 = "false";
                _subscriptionValidation3 = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
            }
        }
        else
        {
            AddModuleMessage(Localizer["EmailInvalid"], MessageType.Warning, "bottom");
        }
    }

    private async Task SubmitComment()
    {
        // input validation
        if (!string.IsNullOrEmpty(_commentName) && !string.IsNullOrEmpty(_commentEmail) && Utilities.IsValidEmail(_commentEmail) && !string.IsNullOrEmpty(_commentComment))
        {
            // bot validation
            if (_commentValidation1.Length == 0 && _commentValidation2.Length == 19 && DateTime.TryParseExact(_commentValidation2, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp1) &&
              _commentValidation3.Length == 19 && DateTime.TryParseExact(_commentValidation3, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime timestamp2) &&
              (timestamp1 - timestamp2).TotalSeconds >= _mintime && (timestamp1 - timestamp2).TotalSeconds <= _maxtime &&
              (DateTime.UtcNow - timestamp2).TotalSeconds >= _mintime && (DateTime.UtcNow - timestamp2).TotalSeconds <= _maxtime)
            {
                var blogComment = new BlogComment { BlogId = _blog.BlogId, Name = _commentName, Email = _commentEmail, Comment = _commentComment, PagePath = PageState.Page.Path };
                if (PageState.QueryString.ContainsKey("comment"))
                {
                    blogComment.BlogCommentId = int.Parse(PageState.QueryString["comment"]);
                    blogComment.CreatedOn = DateTime.Parse(_commentCreatedOn);
                    blogComment.IsPublished = _blogEditor;
                    blogComment = await BlogCommentService.UpdateBlogCommentAsync(blogComment, ModuleState.ModuleId);
                }
                else
                {
                    blogComment = await BlogCommentService.AddBlogCommentAsync(blogComment, ModuleState.ModuleId);
                }

                _commentName = "";
                _commentEmail = "";
                _commentComment = "";
                _commentCreatedOn = "";
                _commentValidation1 = "";
                _commentValidation2 = "true";
                _commentValidation3 = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);

                _blogComments = await BlogCommentService.GetBlogCommentsAsync(_blog.BlogId, ModuleState.ModuleId, true);
                StateHasChanged();

                if (!blogComment.IsPublished)
                {
                    AddModuleMessage("Thank You For Submitting a Comment. Please Check Your Email For Instructions On How To Publish Or Edit Your Comment.", MessageType.Success, "bottom");
                }
            }
            else
            {
                // clear fields for bot
                _commentName = "";
                _commentEmail = "";
                _commentComment = "";
                _commentCreatedOn = "";
                _commentValidation1 = "";
                _commentValidation2 = "false";
                _commentValidation3 = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
            }
        }
        else
        {
            AddModuleMessage("You Must Enter All Required Fields", MessageType.Warning, "bottom");
        }
    }
}
